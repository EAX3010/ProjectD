@page "/products"
@using Application.Interfaces
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IProductService productsService

<div class="container-fluid mt-4">
    <h3 class="mb-4">Products</h3>
    @if (products == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Image</th>
                        <th>Description</th>
                        <th>Stock</th>
                        <th>Featured</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in products)
                    {
                        <tr>
                            <td>@product.Id</td>
                            <td>@product.Name</td>
                            <td>@product.Price.ToString("C")</td>
                            <td>
                                <img src="@product.Image" alt="@product.Name" class="img-thumbnail" style="max-width: 50px; max-height: 50px;" />
                            </td>
                            <td>
                                <div class="text-truncate" style="max-width: 200px;" title="@product.Description">
                                    @product.Description
                                </div>
                            </td>
                            <td>@product.StockQuantity</td>
                            <td>
                                @if (product.Featured)
                                {
                                    <span class="badge badge-success">Yes</span>
                                }
                                else
                                {
                                    <span class="badge badge-secondary">No</span>
                                }
                            </td>
                            <td>@product.CategoryName</td>
                            <td>
                                <div class="btn-group" role="group">
                                    <button class="btn btn-outline-primary btn-sm" @onclick="() => EditProduct(product?.Id)">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteProduct(product?.Id)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    <div class="mt-3">
        <button class="btn btn-success" @onclick="AddProduct">
            <i class="bi bi-plus-circle"></i> Add Product
        </button>
    </div>
</div>

@code {
    private List<ProductDto> products;

    protected override async Task OnInitializedAsync()
    {
        var respond = await productsService.GetProductsAsync();
        if (respond.Flag == Enums.ResponseType.Success)
        {
            products = respond.Instance.ToList();
        }
        else
        {
            products = new List<ProductDto>();
        }
        Console.WriteLine(respond.Message);

    }

    private void AddProduct()
    {
        NavigationManager.NavigateTo("/product/add");
    }

    private void EditProduct(int? id)
    {
        if (id.HasValue)
            NavigationManager.NavigateTo($"/product/edit/{id}");
    }

    private async Task DeleteProduct(int? id)
    {
        if (id.HasValue)
        {
            if (await ConfirmDeleteAsync())
            {
                var respond = await productsService.DeleteProductAsync(id);
                if (respond.Flag == Enums.ResponseType.Success)
                    products.RemoveAll(p => p.Id == id);

                Console.WriteLine(respond.Message);
            }
        }
    }

    private async Task<bool> ConfirmDeleteAsync()
    {
        return await Task.FromResult(true);
    }
}

