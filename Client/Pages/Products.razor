@page "/products"
@using Application.Interfaces
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IProductService productsService
<h3>Products</h3>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Price</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Price.ToString("C")</td>
                    <td> <img src="@product.Image" /></td>
                    <td>@product.CategoryName</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditProduct(product.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-success" @onclick="AddProduct">Add Product</button>

@code {
    private List<ProductDto> products;

    protected override async Task OnInitializedAsync()
    {
        var respond = await productsService.GetProductsAsync();
        if (respond.Flag == Enums.ResponseType.Success)
        {
            products = respond.Instance.ToList();
        }
        else
        {
            products = new List<ProductDto>();
        }
        Console.WriteLine(respond.Message);

    }

    private void AddProduct()
    {
        NavigationManager.NavigateTo("/product/add");
    }

    private void EditProduct(int id)
    {
        NavigationManager.NavigateTo($"/product/edit/{id}");
    }

    private async Task DeleteProduct(int id)
    {
        if (await ConfirmDeleteAsync())
        {
            var respond = await productsService.DeleteProductAsync(id);
            if (respond.Flag == Enums.ResponseType.Success)
                products.RemoveAll(p => p.Id == id);

            Console.WriteLine(respond.Message);
        }
    }

    private async Task<bool> ConfirmDeleteAsync()
    {
        return await Task.FromResult(true);
    }
}

