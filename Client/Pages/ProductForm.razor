@page "/product/add"
@page "/product/edit/{Id:int}"
@using Application.Interfaces
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject ICategoryService CategoryService

<div class="container mt-4">
    <h1 class="mb-4">@(Id == null ? "Add" : "Edit") Product</h1>

    <EditForm Model="@product" OnValidSubmit="HandleValidSubmit" class="needs-validation" novalidate>
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger mb-4" />
        @if (categories != null)
        {
            <div class="form-group">
                <label for="Name">Name</label>
                <InputText id="Name" @bind-Value="product.Name" class="form-control" />
                <ValidationMessage For="@(() => product.Name)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="Price">Price</label>
                <InputNumber id="Price" @bind-Value="product.Price" class="form-control" />
                <ValidationMessage For="@(() => product.Price)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="Description">Description</label>
                <InputTextArea id="Description" @bind-Value="product.Description" class="form-control" rows="3" />
                <ValidationMessage For="@(() => product.Description)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="image">Image URL</label>
                <InputText id="image" @bind-Value="product.Image" class="form-control" />
                <ValidationMessage For="@(() => product.Image)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="stockQuantity">Stock Quantity</label>
                <InputNumber id="stockQuantity" @bind-Value="product.StockQuantity" class="form-control" />
                <ValidationMessage For="@(() => product.StockQuantity)" class="text-danger" />
            </div>

            <div class="form-group form-check">
                <InputCheckbox id="featured" @bind-Value="product.Featured" class="form-check-input" />
                <label class="form-check-label" for="featured">Featured</label>
                <ValidationMessage For="@(() => product.Featured)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="categoryId">Category</label>
                <InputSelect @bind-Value="product.CategoryId" class="form-control">
                    <option value="">-- Select Category --</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => product.CategoryId)" class="text-danger" />
            </div>
        }

        <div class="form-group">
            <button type="submit" class="btn btn-primary">
                <i class="bi bi-save"></i> Save
            </button>
            <button type="button" class="btn btn-secondary ml-2" @onclick="Cancel">
                <i class="bi bi-x-circle"></i> Cancel
            </button>
        </div>
    </EditForm>
</div>


@code 
{
    [Parameter]
    public int? Id { get; set; }

    private ProductDto product = new ProductDto();
    private List<CategoryDto> categories;

    protected override async Task OnInitializedAsync()
    {
        var categoriesResponse = await CategoryService.GetCategoriesAsync();
        if (categoriesResponse.Flag == Enums.ResponseType.Success)
        {
            categories = categoriesResponse.Instance.ToList();
        }

        if (Id.HasValue)
        {
            var productResponse = await ProductService.GetProductByIdAsync(Id.Value);
            if (productResponse.Flag == Enums.ResponseType.Success)
            {
                product = productResponse.Instance;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        ServerResponse<ProductDto> response;

        if (Id.HasValue)
        {
            response = await ProductService.UpdateProductAsync(product);
        }
        else
        {
            response = await ProductService.AddProductAsync(product);
        }

        if (response.Flag == Enums.ResponseType.Success)
        {
            NavigationManager.NavigateTo("/products");
        }
        else
        {
            // Handle error
            Console.WriteLine($"Error: {response.Message}");
            // You might want to display this error to the user
        }
    }
    private void Cancel()
    {
        NavigationManager.NavigateTo("/products");
    }
}